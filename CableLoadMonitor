#!/bin/sh

#
# DOCSIS cable load monitor 
#
# tool to monitor downstream load on docsis cable networks
#
# https://github.com/sp4rkie/docsis-cable-load-monitor
#

export LD_PRELOAD=/opt/lib/libmediaclient.so

cat > $0_$$.awk << !

func setup( \
    )
{
    CLARGS = "$0|$1|$2|$3|$4|$5|$6|$7|$8|$9|${10}|${11}|${12}|${13}|${14}|${15}|${16}|${17}|${18}|${19}|${20}"

    # avoid dangling include files. incore inode still exists
    system("rm $0_$$.awk")

    # take care of shell expansion (if security is an issue)
    setup_lib($#, "awk|" CLARGS, $$, "`pwd`", "`hostname`", "$R_")
    PRP(CLARGS "\n")

    CABLE_MODEM_IP = "192.168.100.1"

    RRDBASE = "CableLoadMonitor.rrd"
    RRDGRAPH = "CableLoadMonitor.png"
    RRDGRAPH_TMP = RRDGRAPH "_"

    RDDGRAPH_WIDTH = 1500 # results in 1581x1111
    RDDGRAPH_HEIGHT = 800

    RDDGRAPH_HISTSIZE = 100
    RDDGRAPH_HISTSIZE = 300
    RDDGRAPH_HISTSIZE = 500
    RDDGRAPH_HISTSIZE = 700
    RDDGRAPH_HISTSIZE = 1000
    RDDGRAPH_HISTSIZE = 2000
    #RDDGRAPH_HISTSIZE = 3600
    #RDDGRAPH_HISTSIZE = 7000
    #RDDGRAPH_HISTSIZE = 16000
    #RDDGRAPH_HISTSIZE = 30000
    #RDDGRAPH_HISTSIZE = 86400
}

func exit_(msg \
    )
{
    PRE(msg)
    PRE("exiting...")
    ++ERR; exit
}

#
# specific to TC4400 only ATM
#
func retrieve_down_freqs( \
    URL, ignore, line, WGET, LYNX, i, a)
{
    URL = "http://" CABLE_MODEM_IP "/cmconnectionstatus.html"

if (0) {
    WGET = "wget --connect-timeout=1 -t 1 -q --http-user=admin --http-password=\"bEn2o#US9s\" " URL " -O -"
    LYNX = "lynx -nolist -width 300 -dump -stdin"
    while ((line = ex_line(WGET)) != -1) {
        if (match(line, "<script")) {
            ++ignore
        } else if (ignore) {
            if (match(line, "/script?")) {
                ignore = 0
            }
        } else {
            print line |& LYNX
        }
    }
    close(LYNX, "to")
    while (LYNX |& getline line > 0) {
        if (match(line, "Locked +SC-QAM +Downstream +Bonded +([0-9]+) ", a)) {
            FREQ[FREQ_CNT++] = a[1]
        }
    }
    close(LYNX)
} else {
    FREQ[FREQ_CNT++] = "530000000"
    FREQ[FREQ_CNT++] = "538000000"
    FREQ[FREQ_CNT++] = "546000000"
    FREQ[FREQ_CNT++] = "554000000"
    FREQ[FREQ_CNT++] = "562000000"
    FREQ[FREQ_CNT++] = "570000000"
    FREQ[FREQ_CNT++] = "578000000"
    FREQ[FREQ_CNT++] = "586000000"
    FREQ[FREQ_CNT++] = "594000000"
    FREQ[FREQ_CNT++] = "602000000"
    FREQ[FREQ_CNT++] = "610000000"
    FREQ[FREQ_CNT++] = "618000000"
    FREQ[FREQ_CNT++] = "626000000"
    FREQ[FREQ_CNT++] = "634000000"
    FREQ[FREQ_CNT++] = "642000000"
    FREQ[FREQ_CNT++] = "650000000"
}
    PRF("scanned freqs: ")
    for (i = 0; i < FREQ_CNT; ++i) {
        PRF(FREQ[i] / 1000000 " ")
        BWIDTH_OF[i] = 0
    }
    PR("\n")
}

func assemble_rrdcreate_cmd( \
    )
{

}

func assemble_rrdgraph_cmd( \
    CMD, i)
{
    CMD = "rrdtool graph " RRDGRAPH_TMP " -a PNG --lower-limit 0"                                                      " \\\\\n" \
          "--title=\"Graph generated at \`date\`\""                                                                     " \\\\\n" \
          "-w " RDDGRAPH_WIDTH " -h " RDDGRAPH_HEIGHT " --end now --start end-" RDDGRAPH_HISTSIZE "s"                   " \\\\\n" 
    CMD = CMD                                                                                                           " \\\\\n"
    for (i = 0; i < FREQ_CNT; ++i) {
        CMD = CMD sprintf("DEF:f%02d=" RRDBASE ":f%02d:AVERAGE", i, i)                                                 " \\\\\n" 
    }
    CMD = CMD sprintf("DEF:sum=" RRDBASE ":sum:AVERAGE", i, i)                                                         " \\\\\n" 
    CMD = CMD                                                                                                           " \\\\\n"
    for (i = 0; i < FREQ_CNT; ++i) {
        if (i < FREQ_CNT / 2) {
            CMD = CMD sprintf("\"LINE:f%02d#ff0000:%d\"", i, FREQ[i] / 1000000)                                         " \\\\\n" 
        } else {
            CMD = CMD sprintf("\"LINE:f%02d#0000ff:%d\"", i, FREQ[i] / 1000000)                                         " \\\\\n" 
        }
    }
    CMD = CMD                                                                                                           " \\\\\n"
    CMD = CMD "\"LINE:sum#00ff00:sum\\\l\""                                                                             " \\\\\n"
    CMD = CMD                                                                                                           " \\\\\n"
    for (i = 0; i < FREQ_CNT; ++i) {
        CMD = CMD sprintf("\"GPRINT:f%02d:LAST:%d last\\\: %%6.0lf %%s\"", i, FREQ[i] / 1000000)                        " \\\\\n"
        CMD = CMD sprintf("\"GPRINT:f%02d:AVERAGE:avg\\\: %%6.0lf %%s\"", i, FREQ[i] / 1000000)                         " \\\\\n"
        CMD = CMD sprintf("\"GPRINT:f%02d:MIN:min\\\: %%6.0lf %%s\"", i, FREQ[i] / 1000000)                             " \\\\\n"
        CMD = CMD sprintf("\"GPRINT:f%02d:MAX:max\\\: %%6.0lf %%s\\\j\"", i, FREQ[i] / 1000000)                         " \\\\\n"
    }
    CMD = CMD sprintf("\"GPRINT:sum:LAST:sum last\\\: %%6.0lf %%s\"", i, FREQ[i] / 1000000)                             " \\\\\n"
    CMD = CMD sprintf("\"GPRINT:sum:AVERAGE:avg\\\: %%6.0lf %%s\"", i, FREQ[i] / 1000000)                               " \\\\\n"
    CMD = CMD sprintf("\"GPRINT:sum:MIN:min\\\: %%6.0lf %%s\"", i, FREQ[i] / 1000000)                                   " \\\\\n"
    CMD = CMD sprintf("\"GPRINT:sum:MAX:max\\\: %%6.0lf %%s\\\j\"", i, FREQ[i] / 1000000)                              #" \\\\\n"

    RRDGRAPH_CMD = CMD
}

func scan_down_channels( \
    RDD_UPD_STR, BWIDTH_SUM, a, i, k)
{
    PRF(strftime("%T: "))
    for (i = 0; i < FREQ_CNT; ++i) {
        ex("dvbtune -f " FREQ[i] " -s 6952 -qam 256")

        #
        # in case of very small bandwidth values limit the measurement 
        # interval to something useful to keep the overall scan time sufficiently low
        #
        ex("timeout 1 dvbsnoop -s bandwidth 8190 -n 400", 0, "^## PID:.*Avrg: +([^ ]+) ", a)
        BWIDTH_OF[i] = int(a[1] + 0.5)
        PRF(sprintf("%6s", BWIDTH_OF[i]))
        BWIDTH_SUM = 0
        RDD_UPD_STR = "rrdtool update " RRDBASE " N"
        for (k = 0; k < FREQ_CNT; ++k) {
            BWIDTH_SUM = BWIDTH_SUM + BWIDTH_OF[k]
            RDD_UPD_STR = RDD_UPD_STR ":" BWIDTH_OF[k]
        }
        RDD_UPD_STR = RDD_UPD_STR ":" BWIDTH_SUM
        ex(RDD_UPD_STR, 2)
    }
    PR(sprintf("%7s", BWIDTH_SUM))
}

func generate_rrdgraph( \
    )
{
    ex(RRDGRAPH_CMD)
    ex("mv " RRDGRAPH_TMP " " RRDGRAPH, 2)
}

func watch_the_scenery( \
    )
{
    while (1) {
        scan_down_channels()
        generate_rrdgraph()
    }
}

func usage( \
    locked, line, a)
{
    PR("Usage: " PRGBNAME)
    while ((line = ex_line("cat " PRGNAME)) != -1) {
        if (locked) {
            if (match(line, "match[^,]+, \"(.+)\"[^\"]+# (.*)$", a)) {
                PR(sprintf("  %-40s - %s", a[1], a[2]))
            }
        } else {
            if (match(line, "^func process_cmdline")) ++locked
        }
    }
}

func process_cmdline( \
    )
{
    if (match("$*", "help$")) { # print this help and exit
        usage()
    } else {
        retrieve_down_freqs()
        assemble_rrdcreate_cmd()
        assemble_rrdgraph_cmd()
        watch_the_scenery()
    }
}

BEGIN {
    QUIET = 1
    setup()
    process_cmdline()
    exit
}

END { 
    cleanup()
    PRP("\n" PRGBNAME " " "exits with: " (ERR ? ERR : 0) " " "error(s)")
    PRP("====== [" sprintf(" %5d ", PROCINFO["pid"]) "] program stop  [" strftime() "] on " HOSTNAME " ======")
    close(PROTOCOL)
    exit ERR
}

!

[ -t 0 ] && STDIN="< /dev/null"
eval exec awk -f l5.awklib -f $0_$$.awk $STDIN 2>&1

